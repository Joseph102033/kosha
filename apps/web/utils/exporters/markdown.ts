/**
 * Markdown Exporter
 * Generates .md file with OPS document content
 */

import { OPSExportData, ExportOptions, DEFAULT_EXPORT_OPTIONS } from './types';

export function generateMarkdown(data: OPSExportData, options: ExportOptions = {}): string {
  const opts = { ...DEFAULT_EXPORT_OPTIONS, ...options };

  const lines: string[] = [];

  // Title
  lines.push(`# ${data.title}`);
  lines.push('');

  // Metadata
  lines.push('## 사고 정보');
  lines.push('');
  lines.push(`- **발생일시:** ${data.incident_date}`);
  lines.push(`- **발생장소:** ${data.location}`);
  lines.push(`- **기인물:** ${data.agent_object}`);
  lines.push(`- **가해물:** ${data.hazard_object}`);
  lines.push(`- **사고형태:** ${data.incident_type}`);
  lines.push('');

  // Incident cause
  lines.push('## 발생개요');
  lines.push('');
  lines.push(data.incident_cause);
  lines.push('');

  // Summary
  lines.push('## 사고 요약');
  lines.push('');
  lines.push(data.summary);
  lines.push('');

  // Root causes
  lines.push('## 근본 원인 분석');
  lines.push('');
  data.root_causes.forEach((cause, index) => {
    lines.push(`${index + 1}. ${cause}`);
  });
  lines.push('');

  // Prevention checklist
  lines.push('## 재발 방지 체크리스트');
  lines.push('');
  data.prevention_checklist.forEach((item) => {
    lines.push(`- [ ] ${item}`);
  });
  lines.push('');

  // Laws appendix
  if (opts.appendix && data.suggested_laws && data.suggested_laws.length > 0) {
    lines.push('---');
    lines.push('');
    lines.push('## 부록: 관련 법령');
    lines.push('');

    data.suggested_laws.forEach((law, index) => {
      lines.push(`### ${index + 1}. ${law.law_title} ${law.article_no}`);
      lines.push('');

      if (law.confidence && law.confidence_level) {
        const badge = law.confidence_level === 'high' ? '✓ 추천' :
                      law.confidence_level === 'medium' ? '⚠ 검토요망' : '• 보류';
        lines.push(`**신뢰도:** ${badge} (${law.confidence}%)`);
        lines.push('');
      }

      lines.push(law.text);
      lines.push('');
    });
  }

  // Watermark and hash
  lines.push('---');
  lines.push('');

  if (opts.includeWatermark && opts.toolName) {
    lines.push(`*Generated by ${opts.toolName}*`);
    lines.push('');
  }

  if (opts.includeHash) {
    lines.push(`**Document Hash:** \`${data.document_hash}\``);
    lines.push('');
  }

  lines.push(`**Generated:** ${new Date(data.created_at).toLocaleString('ko-KR')}`);
  lines.push('');

  return lines.join('\n');
}

export function downloadMarkdown(data: OPSExportData, filename?: string, options?: ExportOptions): void {
  const markdown = generateMarkdown(data, options);
  const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });

  const defaultFilename = `OPS_${data.incident_date.replace(/[/:]/g, '-')}_${data.document_hash.substring(0, 8)}.md`;
  const finalFilename = filename || defaultFilename;

  // Create download link
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = finalFilename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(link.href);
}
